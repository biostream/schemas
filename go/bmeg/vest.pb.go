// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bmeg/vest.proto

package bmeg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VestScore struct {
	AaMutation string          `protobuf:"bytes,1,opt,name=aa_mutation,json=aaMutation" json:"aa_mutation,omitempty"`
	Alt        string          `protobuf:"bytes,2,opt,name=alt" json:"alt,omitempty"`
	Chromosome string          `protobuf:"bytes,3,opt,name=chromosome" json:"chromosome,omitempty"`
	Gene       *VestScore_Gene `protobuf:"bytes,4,opt,name=gene" json:"gene,omitempty"`
	ProteinAlt string          `protobuf:"bytes,5,opt,name=protein_alt,json=proteinAlt" json:"protein_alt,omitempty"`
	ProteinRef string          `protobuf:"bytes,6,opt,name=protein_ref,json=proteinRef" json:"protein_ref,omitempty"`
	Ref        string          `protobuf:"bytes,7,opt,name=ref" json:"ref,omitempty"`
	Score      float64         `protobuf:"fixed64,8,opt,name=score" json:"score,omitempty"`
	Start      int64           `protobuf:"varint,9,opt,name=start" json:"start,omitempty"`
	Transcript string          `protobuf:"bytes,10,opt,name=transcript" json:"transcript,omitempty"`
}

func (m *VestScore) Reset()                    { *m = VestScore{} }
func (m *VestScore) String() string            { return proto.CompactTextString(m) }
func (*VestScore) ProtoMessage()               {}
func (*VestScore) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *VestScore) GetAaMutation() string {
	if m != nil {
		return m.AaMutation
	}
	return ""
}

func (m *VestScore) GetAlt() string {
	if m != nil {
		return m.Alt
	}
	return ""
}

func (m *VestScore) GetChromosome() string {
	if m != nil {
		return m.Chromosome
	}
	return ""
}

func (m *VestScore) GetGene() *VestScore_Gene {
	if m != nil {
		return m.Gene
	}
	return nil
}

func (m *VestScore) GetProteinAlt() string {
	if m != nil {
		return m.ProteinAlt
	}
	return ""
}

func (m *VestScore) GetProteinRef() string {
	if m != nil {
		return m.ProteinRef
	}
	return ""
}

func (m *VestScore) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *VestScore) GetScore() float64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *VestScore) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *VestScore) GetTranscript() string {
	if m != nil {
		return m.Transcript
	}
	return ""
}

type VestScore_Gene struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *VestScore_Gene) Reset()                    { *m = VestScore_Gene{} }
func (m *VestScore_Gene) String() string            { return proto.CompactTextString(m) }
func (*VestScore_Gene) ProtoMessage()               {}
func (*VestScore_Gene) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0, 0} }

func (m *VestScore_Gene) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VestScore_Gene) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*VestScore)(nil), "bmeg.VestScore")
	proto.RegisterType((*VestScore_Gene)(nil), "bmeg.VestScore.Gene")
}

func init() { proto.RegisterFile("bmeg/vest.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0xe5, 0x24, 0x2d, 0xe4, 0x2a, 0x01, 0xb2, 0x3a, 0x58, 0x0c, 0x10, 0x31, 0x45, 0x0c,
	0x41, 0x82, 0x27, 0x60, 0x62, 0x62, 0x31, 0x12, 0x6b, 0xe5, 0xa6, 0x97, 0x62, 0xa9, 0xb6, 0x2b,
	0xfb, 0xe0, 0x49, 0x79, 0x20, 0x74, 0x76, 0x44, 0x61, 0xbb, 0xfb, 0xee, 0x7c, 0xff, 0xef, 0x1f,
	0x2e, 0xb7, 0x0e, 0xf7, 0x0f, 0x5f, 0x98, 0x68, 0x38, 0xc6, 0x40, 0x41, 0x36, 0x0c, 0xee, 0xbe,
	0x2b, 0x68, 0xdf, 0x31, 0xd1, 0xdb, 0x18, 0x22, 0xca, 0x5b, 0x58, 0x19, 0xb3, 0x71, 0x9f, 0x64,
	0xc8, 0x06, 0xaf, 0x44, 0x27, 0xfa, 0x56, 0x83, 0x31, 0xaf, 0x33, 0x91, 0x57, 0x50, 0x9b, 0x03,
	0xa9, 0x2a, 0x0f, 0xb8, 0x94, 0x37, 0x00, 0xe3, 0x47, 0x0c, 0x2e, 0xa4, 0xe0, 0x50, 0xd5, 0xe5,
	0xc5, 0x89, 0xc8, 0x1e, 0x9a, 0x3d, 0x7a, 0x54, 0x4d, 0x27, 0xfa, 0xd5, 0xe3, 0x7a, 0x60, 0xd5,
	0xe1, 0x57, 0x71, 0x78, 0x41, 0x8f, 0x3a, 0x6f, 0xb0, 0x38, 0x3b, 0x43, 0xeb, 0x37, 0xac, 0xb1,
	0x28, 0xa7, 0x66, 0xf4, 0x7c, 0xa0, 0xbf, 0x0b, 0x11, 0x27, 0xb5, 0xfc, 0xb7, 0xa0, 0x71, 0x62,
	0x77, 0x3c, 0x38, 0x2b, 0xee, 0x22, 0x4e, 0x72, 0x0d, 0x8b, 0xc4, 0x3a, 0xea, 0xbc, 0x13, 0xbd,
	0xd0, 0xa5, 0xc9, 0x94, 0x4c, 0x24, 0xd5, 0x76, 0xa2, 0xaf, 0x75, 0x69, 0xf8, 0x27, 0x14, 0x8d,
	0x4f, 0x63, 0xb4, 0x47, 0x52, 0x50, 0xae, 0x9f, 0xc8, 0xf5, 0x3d, 0x34, 0xec, 0x56, 0x5e, 0x40,
	0x65, 0x77, 0x73, 0x36, 0x95, 0xdd, 0x49, 0x09, 0x8d, 0x37, 0x0e, 0xe7, 0x50, 0x72, 0xbd, 0x5d,
	0xe6, 0x8c, 0x9f, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x11, 0xcf, 0x0f, 0x20, 0x76, 0x01, 0x00,
	0x00,
}
