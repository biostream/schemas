// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bmeg/clinical.proto

package bmeg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "google/protobuf"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// An ontology term describing an attribute. (e.g. the phenotype attribute
// 'polydactyly' from HPO)
type OntologyTerm struct {
	// Ontology term identifier - the CURIE for an ontology term. It
	// differs from the standard GA4GH schema's :ref:`id <apidesign_object_ids>`
	// in that it is a CURIE pointing to an information resource outside of the
	// scope of the schema or its resource implementation.
	TermId string `protobuf:"bytes,1,opt,name=term_id,json=termId" json:"term_id,omitempty"`
	// Ontology term - the label of the ontology term the termId is pointing to.
	Term string `protobuf:"bytes,2,opt,name=term" json:"term,omitempty"`
}

func (m *OntologyTerm) Reset()                    { *m = OntologyTerm{} }
func (m *OntologyTerm) String() string            { return proto.CompactTextString(m) }
func (*OntologyTerm) ProtoMessage()               {}
func (*OntologyTerm) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *OntologyTerm) GetTermId() string {
	if m != nil {
		return m.TermId
	}
	return ""
}

func (m *OntologyTerm) GetTerm() string {
	if m != nil {
		return m.Term
	}
	return ""
}

type Individual struct {
	// The Individual's :ref:`id <apidesign_object_ids>`. This is unique in the
	// context of the server instance.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The ID of the dataset this Individual belongs to.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	// The Individual's name. This is a label or symbolic identifier for the individual.
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// The Individual's description. This attribute contains human readable text.
	// The "description" attributes should not contain any structured data.
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this Individual's record
	// was created.
	Created string `protobuf:"bytes,5,opt,name=created" json:"created,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this Individual record
	// was updated.
	Updated string `protobuf:"bytes,6,opt,name=updated" json:"updated,omitempty"`
	// For a representation of an NCBI Taxon ID as an OntologyTerm, see
	// NCBITaxon Ontology
	//   http://www.obofoundry.org/ontology/ncbitaxon.html
	// For example, 'Homo sapiens' has the ID 9606. The NCBITaxon ontology ID for
	// this is NCBITaxon:9606, and therefore:
	//   species : { term_id: "NCBITaxon:9606", term : "Homo sapiens" }
	Species *OntologyTerm `protobuf:"bytes,7,opt,name=species" json:"species,omitempty"`
	// The genetic sex of this individual.
	// Use `null` when unknown or not applicable.
	// Recommended: PATO http://purl.obolibrary.org/obo/PATO_0020000 ...
	// Example:
	//   sex : { term_id: "PATO:0020000", term : "female genetic sex" }
	Sex *OntologyTerm `protobuf:"bytes,8,opt,name=sex" json:"sex,omitempty"`
	// the source of the data
	Source string `protobuf:"bytes,9,opt,name=source" json:"source,omitempty"`
	// A map of additional information regarding the Individual.
	Attributes *google_protobuf.Struct `protobuf:"bytes,10,opt,name=attributes" json:"attributes,omitempty"`
}

func (m *Individual) Reset()                    { *m = Individual{} }
func (m *Individual) String() string            { return proto.CompactTextString(m) }
func (*Individual) ProtoMessage()               {}
func (*Individual) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Individual) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Individual) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *Individual) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Individual) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Individual) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Individual) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *Individual) GetSpecies() *OntologyTerm {
	if m != nil {
		return m.Species
	}
	return nil
}

func (m *Individual) GetSex() *OntologyTerm {
	if m != nil {
		return m.Sex
	}
	return nil
}

func (m *Individual) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Individual) GetAttributes() *google_protobuf.Struct {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type Biosample struct {
	// The Biosample :ref:`id <apidesign_object_ids>`. This is unique in the
	// context of the server instance.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The ID of the dataset this Biosample belongs to.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	// The Biosample's name This is a label or symbolic identifier for the biosample.
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// The biosample's description. This attribute contains human readable text.
	// The "description" attributes should not contain any structured data.
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// OntologyTerm describing the primary disease associated with this Biosample.
	Disease *OntologyTerm `protobuf:"bytes,5,opt,name=disease" json:"disease,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this Biosample record
	// was created.
	Created string `protobuf:"bytes,6,opt,name=created" json:"created,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this Biosample record was
	// updated.
	Updated string `protobuf:"bytes,7,opt,name=updated" json:"updated,omitempty"`
	// The individual this biosample was derived from.
	IndividualId string `protobuf:"bytes,8,opt,name=individual_id,json=individualId" json:"individual_id,omitempty"`
	// the source of the data
	Source string `protobuf:"bytes,9,opt,name=source" json:"source,omitempty"`
	// A map of additional information about the Biosample.
	Attributes *google_protobuf.Struct `protobuf:"bytes,10,opt,name=attributes" json:"attributes,omitempty"`
	// An age object describing the age of the individual this biosample was
	// derived from at the time of collection. The Age object allows the encoding
	// of the age either as ISO8601 duraion or time interval (preferred), or
	// as ontology term object.
	IndividualAgeAtCollection string `protobuf:"bytes,11,opt,name=individual_age_at_collection,json=individualAgeAtCollection" json:"individual_age_at_collection,omitempty"`
}

func (m *Biosample) Reset()                    { *m = Biosample{} }
func (m *Biosample) String() string            { return proto.CompactTextString(m) }
func (*Biosample) ProtoMessage()               {}
func (*Biosample) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Biosample) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Biosample) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *Biosample) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Biosample) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Biosample) GetDisease() *OntologyTerm {
	if m != nil {
		return m.Disease
	}
	return nil
}

func (m *Biosample) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Biosample) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *Biosample) GetIndividualId() string {
	if m != nil {
		return m.IndividualId
	}
	return ""
}

func (m *Biosample) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Biosample) GetAttributes() *google_protobuf.Struct {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Biosample) GetIndividualAgeAtCollection() string {
	if m != nil {
		return m.IndividualAgeAtCollection
	}
	return ""
}

type DrugTherapy struct {
	Id             string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	IndividualId   string `protobuf:"bytes,3,opt,name=individual_id,json=individualId" json:"individual_id,omitempty"`
	DrugName       string `protobuf:"bytes,4,opt,name=drug_name,json=drugName" json:"drug_name,omitempty"`
	PubchemId      string `protobuf:"bytes,5,opt,name=pubchem_id,json=pubchemId" json:"pubchem_id,omitempty"`
	PrescribedDose string `protobuf:"bytes,6,opt,name=prescribed_dose,json=prescribedDose" json:"prescribed_dose,omitempty"`
	Source         string `protobuf:"bytes,7,opt,name=source" json:"source,omitempty"`
}

func (m *DrugTherapy) Reset()                    { *m = DrugTherapy{} }
func (m *DrugTherapy) String() string            { return proto.CompactTextString(m) }
func (*DrugTherapy) ProtoMessage()               {}
func (*DrugTherapy) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *DrugTherapy) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DrugTherapy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DrugTherapy) GetIndividualId() string {
	if m != nil {
		return m.IndividualId
	}
	return ""
}

func (m *DrugTherapy) GetDrugName() string {
	if m != nil {
		return m.DrugName
	}
	return ""
}

func (m *DrugTherapy) GetPubchemId() string {
	if m != nil {
		return m.PubchemId
	}
	return ""
}

func (m *DrugTherapy) GetPrescribedDose() string {
	if m != nil {
		return m.PrescribedDose
	}
	return ""
}

func (m *DrugTherapy) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type RadiationTherapy struct {
	Id           string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name         string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	IndividualId string  `protobuf:"bytes,3,opt,name=individual_id,json=individualId" json:"individual_id,omitempty"`
	TotalDose    float32 `protobuf:"fixed32,4,opt,name=total_dose,json=totalDose" json:"total_dose,omitempty"`
	Source       string  `protobuf:"bytes,5,opt,name=source" json:"source,omitempty"`
}

func (m *RadiationTherapy) Reset()                    { *m = RadiationTherapy{} }
func (m *RadiationTherapy) String() string            { return proto.CompactTextString(m) }
func (*RadiationTherapy) ProtoMessage()               {}
func (*RadiationTherapy) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *RadiationTherapy) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RadiationTherapy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RadiationTherapy) GetIndividualId() string {
	if m != nil {
		return m.IndividualId
	}
	return ""
}

func (m *RadiationTherapy) GetTotalDose() float32 {
	if m != nil {
		return m.TotalDose
	}
	return 0
}

func (m *RadiationTherapy) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type ClinicalFollowup struct {
	Id           string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	IndividualId string `protobuf:"bytes,3,opt,name=individual_id,json=individualId" json:"individual_id,omitempty"`
	Date         string `protobuf:"bytes,4,opt,name=date" json:"date,omitempty"`
	Event        string `protobuf:"bytes,5,opt,name=event" json:"event,omitempty"`
	DaysToDeath  int32  `protobuf:"varint,6,opt,name=days_to_death,json=daysToDeath" json:"days_to_death,omitempty"`
	VitalStatus  string `protobuf:"bytes,7,opt,name=vital_status,json=vitalStatus" json:"vital_status,omitempty"`
	Source       string `protobuf:"bytes,8,opt,name=source" json:"source,omitempty"`
}

func (m *ClinicalFollowup) Reset()                    { *m = ClinicalFollowup{} }
func (m *ClinicalFollowup) String() string            { return proto.CompactTextString(m) }
func (*ClinicalFollowup) ProtoMessage()               {}
func (*ClinicalFollowup) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *ClinicalFollowup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ClinicalFollowup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClinicalFollowup) GetIndividualId() string {
	if m != nil {
		return m.IndividualId
	}
	return ""
}

func (m *ClinicalFollowup) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *ClinicalFollowup) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *ClinicalFollowup) GetDaysToDeath() int32 {
	if m != nil {
		return m.DaysToDeath
	}
	return 0
}

func (m *ClinicalFollowup) GetVitalStatus() string {
	if m != nil {
		return m.VitalStatus
	}
	return ""
}

func (m *ClinicalFollowup) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

// Cohort is for groups of Biosamples
type Cohort struct {
	Id          string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Location    string   `protobuf:"bytes,5,opt,name=location" json:"location,omitempty"`
	Description string   `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	HasSample   []string `protobuf:"bytes,7,rep,name=hasSample" json:"hasSample,omitempty"`
}

func (m *Cohort) Reset()                    { *m = Cohort{} }
func (m *Cohort) String() string            { return proto.CompactTextString(m) }
func (*Cohort) ProtoMessage()               {}
func (*Cohort) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *Cohort) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Cohort) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cohort) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Cohort) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Cohort) GetHasSample() []string {
	if m != nil {
		return m.HasSample
	}
	return nil
}

// IndividualCohort is for groups of Individuals
type IndividualCohort struct {
	Id          string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Location    string   `protobuf:"bytes,5,opt,name=location" json:"location,omitempty"`
	Description string   `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	HasMember   []string `protobuf:"bytes,7,rep,name=hasMember" json:"hasMember,omitempty"`
}

func (m *IndividualCohort) Reset()                    { *m = IndividualCohort{} }
func (m *IndividualCohort) String() string            { return proto.CompactTextString(m) }
func (*IndividualCohort) ProtoMessage()               {}
func (*IndividualCohort) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *IndividualCohort) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *IndividualCohort) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IndividualCohort) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *IndividualCohort) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *IndividualCohort) GetHasMember() []string {
	if m != nil {
		return m.HasMember
	}
	return nil
}

func init() {
	proto.RegisterType((*OntologyTerm)(nil), "bmeg.OntologyTerm")
	proto.RegisterType((*Individual)(nil), "bmeg.Individual")
	proto.RegisterType((*Biosample)(nil), "bmeg.Biosample")
	proto.RegisterType((*DrugTherapy)(nil), "bmeg.DrugTherapy")
	proto.RegisterType((*RadiationTherapy)(nil), "bmeg.RadiationTherapy")
	proto.RegisterType((*ClinicalFollowup)(nil), "bmeg.ClinicalFollowup")
	proto.RegisterType((*Cohort)(nil), "bmeg.Cohort")
	proto.RegisterType((*IndividualCohort)(nil), "bmeg.IndividualCohort")
}

func init() { proto.RegisterFile("bmeg/clinical.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 648 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcf, 0x6e, 0xd4, 0x3e,
	0x10, 0x56, 0xf6, 0x4f, 0xb2, 0x99, 0x6d, 0xfb, 0xab, 0xfc, 0x43, 0x34, 0x94, 0x56, 0x5a, 0x16,
	0x24, 0x7a, 0xa8, 0xb6, 0x12, 0x1c, 0x38, 0x70, 0x40, 0xa5, 0x15, 0xd2, 0x1e, 0x00, 0x69, 0xdb,
	0x7b, 0xe4, 0xc4, 0x43, 0xd6, 0x92, 0x37, 0x8e, 0x6c, 0xa7, 0xd0, 0x37, 0x80, 0x2b, 0x8f, 0xc5,
	0x95, 0x57, 0xe0, 0x41, 0x90, 0xed, 0xec, 0x6e, 0xda, 0xb2, 0xb7, 0xaa, 0x37, 0xcf, 0x37, 0x93,
	0xc9, 0xf7, 0x7d, 0x33, 0x36, 0xfc, 0x9f, 0x2d, 0xb0, 0x38, 0xc9, 0x05, 0x2f, 0x79, 0x4e, 0xc5,
	0xa4, 0x52, 0xd2, 0x48, 0xd2, 0xb3, 0xe0, 0xfe, 0x41, 0x21, 0x65, 0x21, 0xf0, 0xc4, 0x61, 0x59,
	0xfd, 0xe5, 0x44, 0x1b, 0x55, 0xe7, 0xc6, 0xd7, 0x8c, 0xdf, 0xc2, 0xd6, 0xe7, 0xd2, 0x48, 0x21,
	0x8b, 0xeb, 0x4b, 0x54, 0x0b, 0xb2, 0x07, 0x91, 0x41, 0xb5, 0x48, 0x39, 0x4b, 0x82, 0x51, 0x70,
	0x14, 0xcf, 0x42, 0x1b, 0x4e, 0x19, 0x21, 0xd0, 0xb3, 0xa7, 0xa4, 0xe3, 0x50, 0x77, 0x1e, 0xff,
	0xea, 0x00, 0x4c, 0x4b, 0xc6, 0xaf, 0x38, 0xab, 0xa9, 0x20, 0x3b, 0xd0, 0x59, 0x7d, 0xd6, 0xe1,
	0x8c, 0x1c, 0x02, 0x30, 0x6a, 0xa8, 0x46, 0x63, 0xdb, 0xf9, 0x0f, 0xe3, 0x06, 0xf1, 0x1d, 0x4b,
	0xba, 0xc0, 0xa4, 0xeb, 0x3b, 0xda, 0x33, 0x19, 0xc1, 0x90, 0xa1, 0xce, 0x15, 0xaf, 0x0c, 0x97,
	0x65, 0xd2, 0x73, 0xa9, 0x36, 0x44, 0x12, 0x88, 0x72, 0x85, 0xd4, 0x20, 0x4b, 0xfa, 0x2e, 0xbb,
	0x0c, 0x6d, 0xa6, 0xae, 0x98, 0xcb, 0x84, 0x3e, 0xd3, 0x84, 0xe4, 0x18, 0x22, 0x5d, 0x61, 0xce,
	0x51, 0x27, 0xd1, 0x28, 0x38, 0x1a, 0xbe, 0x22, 0x13, 0x6b, 0xcd, 0xa4, 0xad, 0x7c, 0xb6, 0x2c,
	0x21, 0x2f, 0xa0, 0xab, 0xf1, 0x5b, 0x32, 0xd8, 0x58, 0x69, 0xd3, 0xe4, 0x31, 0x84, 0x5a, 0xd6,
	0x2a, 0xc7, 0x24, 0xf6, 0x3e, 0xf9, 0x88, 0xbc, 0x01, 0xa0, 0xc6, 0x28, 0x9e, 0xd5, 0x06, 0x75,
	0x02, 0xae, 0xc9, 0xde, 0xc4, 0xcf, 0x60, 0xb2, 0x9c, 0xc1, 0xe4, 0xc2, 0xcd, 0x60, 0xd6, 0x2a,
	0x1d, 0xff, 0xe8, 0x42, 0xfc, 0x9e, 0x4b, 0x4d, 0x17, 0x95, 0xc0, 0x87, 0xf1, 0xf2, 0x18, 0x22,
	0xc6, 0x35, 0x52, 0x8d, 0xce, 0xcb, 0x0d, 0xbe, 0x34, 0x25, 0x6d, 0xe7, 0xc3, 0x8d, 0xce, 0x47,
	0x37, 0x9d, 0x7f, 0x0e, 0xdb, 0x7c, 0xb5, 0x20, 0x96, 0xf9, 0xc0, 0xe5, 0xb7, 0xd6, 0xe0, 0x94,
	0xdd, 0xbb, 0x95, 0xe4, 0x1d, 0x1c, 0xb4, 0xfe, 0x4a, 0x0b, 0x4c, 0xa9, 0x49, 0x73, 0x29, 0x04,
	0xe6, 0xce, 0x8a, 0xa1, 0xfb, 0xcd, 0x93, 0x75, 0xcd, 0x69, 0x81, 0xa7, 0xe6, 0x6c, 0x55, 0x30,
	0xfe, 0x1d, 0xc0, 0xf0, 0x5c, 0xd5, 0xc5, 0xe5, 0x1c, 0x15, 0xad, 0xae, 0xef, 0x4c, 0x63, 0x69,
	0x77, 0xa7, 0x65, 0xf7, 0x1d, 0xa9, 0xdd, 0x7f, 0x48, 0x7d, 0x0a, 0x31, 0x53, 0x75, 0x91, 0xba,
	0xaf, 0xfd, 0x44, 0x06, 0x16, 0xf8, 0x64, 0x3b, 0x1c, 0x02, 0x54, 0x75, 0x96, 0xcf, 0xd1, 0x5d,
	0x3f, 0xbf, 0xdd, 0x71, 0x83, 0x4c, 0x19, 0x79, 0x09, 0xff, 0x55, 0xca, 0x4d, 0x2f, 0x43, 0x96,
	0x32, 0xa9, 0xb1, 0x99, 0xc3, 0xce, 0x1a, 0x3e, 0x97, 0x1a, 0x5b, 0x7e, 0x46, 0x6d, 0x3f, 0xc7,
	0x3f, 0x03, 0xd8, 0x9d, 0x51, 0xc6, 0xa9, 0xd5, 0x78, 0xef, 0xd2, 0x0e, 0x01, 0x8c, 0x34, 0x54,
	0x78, 0x66, 0x56, 0x5b, 0x67, 0x16, 0x3b, 0xe4, 0x16, 0xa9, 0xfe, 0x0d, 0x52, 0x7f, 0x02, 0xd8,
	0x3d, 0x6b, 0xde, 0xad, 0x0f, 0x52, 0x08, 0xf9, 0xb5, 0xae, 0xee, 0x8f, 0x14, 0x81, 0x9e, 0x5d,
	0xc4, 0xc6, 0x6a, 0x77, 0x26, 0x8f, 0xa0, 0x8f, 0x57, 0x58, 0x9a, 0x86, 0x88, 0x0f, 0xc8, 0x18,
	0xb6, 0x19, 0xbd, 0xd6, 0xa9, 0x91, 0x29, 0x43, 0x6a, 0xe6, 0xce, 0xdb, 0xfe, 0x6c, 0x68, 0xc1,
	0x4b, 0x79, 0x6e, 0x21, 0xf2, 0x0c, 0xb6, 0xae, 0xb8, 0x95, 0xa8, 0x0d, 0x35, 0xb5, 0x6e, 0xec,
	0x1d, 0x3a, 0xec, 0xc2, 0x41, 0x2d, 0x99, 0x83, 0x1b, 0x32, 0xbf, 0x07, 0x10, 0x9e, 0xc9, 0xb9,
	0x54, 0x66, 0xa3, 0xb8, 0x5e, 0x4b, 0xdc, 0x3e, 0x0c, 0x84, 0xcc, 0xdd, 0xa0, 0x1a, 0x9a, 0xab,
	0xf8, 0xf6, 0xbd, 0x0e, 0xef, 0xde, 0xeb, 0x03, 0x88, 0xe7, 0x54, 0x5f, 0xb8, 0x97, 0x24, 0x89,
	0x46, 0x5d, 0xbb, 0x47, 0x2b, 0xc0, 0xad, 0xc1, 0xfa, 0xd5, 0x7e, 0x60, 0x52, 0x1f, 0x71, 0x91,
	0xa1, 0x6a, 0x91, 0xf2, 0x40, 0x16, 0xba, 0xfb, 0xfc, 0xfa, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xe9, 0x51, 0xee, 0x70, 0xc9, 0x06, 0x00, 0x00,
}
