// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bmeg/rna.proto

package bmeg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ExpressionScale int32

const (
	ExpressionScale_UNKNOWN    ExpressionScale = 0
	ExpressionScale_READ_COUNT ExpressionScale = 1
	ExpressionScale_TPKM       ExpressionScale = 2
	ExpressionScale_RPKM       ExpressionScale = 3
	ExpressionScale_FPKM       ExpressionScale = 4
)

var ExpressionScale_name = map[int32]string{
	0: "UNKNOWN",
	1: "READ_COUNT",
	2: "TPKM",
	3: "RPKM",
	4: "FPKM",
}
var ExpressionScale_value = map[string]int32{
	"UNKNOWN":    0,
	"READ_COUNT": 1,
	"TPKM":       2,
	"RPKM":       3,
	"FPKM":       4,
}

func (x ExpressionScale) String() string {
	return proto.EnumName(ExpressionScale_name, int32(x))
}
func (ExpressionScale) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

type GeneExpression struct {
	Id     string          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Source string          `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Alias  []string        `protobuf:"bytes,3,rep,name=alias" json:"alias,omitempty"`
	Scale  ExpressionScale `protobuf:"varint,4,opt,name=scale,enum=bmeg.ExpressionScale" json:"scale,omitempty"`
	// Target: Biosample
	BiosampleId string             `protobuf:"bytes,5,opt,name=biosample_id,json=biosampleId" json:"biosample_id,omitempty"`
	Expressions map[string]float64 `protobuf:"bytes,6,rep,name=expressions" json:"expressions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Method      string             `protobuf:"bytes,7,opt,name=method" json:"method,omitempty"`
}

func (m *GeneExpression) Reset()                    { *m = GeneExpression{} }
func (m *GeneExpression) String() string            { return proto.CompactTextString(m) }
func (*GeneExpression) ProtoMessage()               {}
func (*GeneExpression) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *GeneExpression) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GeneExpression) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *GeneExpression) GetAlias() []string {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *GeneExpression) GetScale() ExpressionScale {
	if m != nil {
		return m.Scale
	}
	return ExpressionScale_UNKNOWN
}

func (m *GeneExpression) GetBiosampleId() string {
	if m != nil {
		return m.BiosampleId
	}
	return ""
}

func (m *GeneExpression) GetExpressions() map[string]float64 {
	if m != nil {
		return m.Expressions
	}
	return nil
}

func (m *GeneExpression) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

type CohortMatrix struct {
	Id          string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Method      string   `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	HasVector   []string `protobuf:"bytes,3,rep,name=hasVector" json:"hasVector,omitempty"`
	HasKeyspace []string `protobuf:"bytes,4,rep,name=hasKeyspace" json:"hasKeyspace,omitempty"`
}

func (m *CohortMatrix) Reset()                    { *m = CohortMatrix{} }
func (m *CohortMatrix) String() string            { return proto.CompactTextString(m) }
func (*CohortMatrix) ProtoMessage()               {}
func (*CohortMatrix) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *CohortMatrix) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CohortMatrix) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *CohortMatrix) GetHasVector() []string {
	if m != nil {
		return m.HasVector
	}
	return nil
}

func (m *CohortMatrix) GetHasKeyspace() []string {
	if m != nil {
		return m.HasKeyspace
	}
	return nil
}

type Keyspace struct {
	Id   string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Keys []string `protobuf:"bytes,3,rep,name=keys" json:"keys,omitempty"`
}

func (m *Keyspace) Reset()                    { *m = Keyspace{} }
func (m *Keyspace) String() string            { return proto.CompactTextString(m) }
func (*Keyspace) ProtoMessage()               {}
func (*Keyspace) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *Keyspace) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Keyspace) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Keyspace) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

type MatrixVectorEdge struct {
	In      string `protobuf:"bytes,1,opt,name=in" json:"in,omitempty"`
	Out     string `protobuf:"bytes,2,opt,name=out" json:"out,omitempty"`
	RowName string `protobuf:"bytes,3,opt,name=rowName" json:"rowName,omitempty"`
}

func (m *MatrixVectorEdge) Reset()                    { *m = MatrixVectorEdge{} }
func (m *MatrixVectorEdge) String() string            { return proto.CompactTextString(m) }
func (*MatrixVectorEdge) ProtoMessage()               {}
func (*MatrixVectorEdge) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

func (m *MatrixVectorEdge) GetIn() string {
	if m != nil {
		return m.In
	}
	return ""
}

func (m *MatrixVectorEdge) GetOut() string {
	if m != nil {
		return m.Out
	}
	return ""
}

func (m *MatrixVectorEdge) GetRowName() string {
	if m != nil {
		return m.RowName
	}
	return ""
}

type MatrixAnalysis struct {
	Id           string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	SourceMatrix []string `protobuf:"bytes,2,rep,name=sourceMatrix" json:"sourceMatrix,omitempty"`
	ResultMatrix []string `protobuf:"bytes,3,rep,name=resultMatrix" json:"resultMatrix,omitempty"`
}

func (m *MatrixAnalysis) Reset()                    { *m = MatrixAnalysis{} }
func (m *MatrixAnalysis) String() string            { return proto.CompactTextString(m) }
func (*MatrixAnalysis) ProtoMessage()               {}
func (*MatrixAnalysis) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

func (m *MatrixAnalysis) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MatrixAnalysis) GetSourceMatrix() []string {
	if m != nil {
		return m.SourceMatrix
	}
	return nil
}

func (m *MatrixAnalysis) GetResultMatrix() []string {
	if m != nil {
		return m.ResultMatrix
	}
	return nil
}

func init() {
	proto.RegisterType((*GeneExpression)(nil), "bmeg.GeneExpression")
	proto.RegisterType((*CohortMatrix)(nil), "bmeg.CohortMatrix")
	proto.RegisterType((*Keyspace)(nil), "bmeg.Keyspace")
	proto.RegisterType((*MatrixVectorEdge)(nil), "bmeg.MatrixVectorEdge")
	proto.RegisterType((*MatrixAnalysis)(nil), "bmeg.MatrixAnalysis")
	proto.RegisterEnum("bmeg.ExpressionScale", ExpressionScale_name, ExpressionScale_value)
}

func init() { proto.RegisterFile("bmeg/rna.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 447 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0x51, 0x6f, 0xd3, 0x30,
	0x18, 0x24, 0x4e, 0xda, 0xae, 0x5f, 0xaa, 0x10, 0x59, 0x80, 0x2c, 0xc4, 0x43, 0x88, 0x84, 0x54,
	0x81, 0x54, 0xa4, 0xf1, 0x82, 0x78, 0x40, 0x1a, 0xa3, 0x4c, 0xa8, 0x2c, 0x43, 0x61, 0x83, 0xc7,
	0xc9, 0x6d, 0xac, 0xc5, 0x5a, 0x6a, 0x57, 0x76, 0x3a, 0x96, 0x5f, 0xc7, 0x5f, 0x43, 0x5f, 0x9c,
	0x76, 0xed, 0xb6, 0xb7, 0xbb, 0x8b, 0x7d, 0xf7, 0xf9, 0xec, 0x40, 0x34, 0x5f, 0x8a, 0xab, 0xf7,
	0x46, 0xf1, 0xc9, 0xca, 0xe8, 0x5a, 0xd3, 0x00, 0x79, 0xfa, 0x8f, 0x40, 0x74, 0x22, 0x94, 0x98,
	0xde, 0xae, 0x8c, 0xb0, 0x56, 0x6a, 0x45, 0x23, 0x20, 0xb2, 0x60, 0x5e, 0xe2, 0x8d, 0x87, 0x39,
	0x91, 0x05, 0x7d, 0x01, 0x7d, 0xab, 0xd7, 0x66, 0x21, 0x18, 0x69, 0xb5, 0x8e, 0xd1, 0x67, 0xd0,
	0xe3, 0x95, 0xe4, 0x96, 0xf9, 0x89, 0x3f, 0x1e, 0xe6, 0x8e, 0xd0, 0x77, 0xd0, 0xb3, 0x0b, 0x5e,
	0x09, 0x16, 0x24, 0xde, 0x38, 0x3a, 0x7c, 0x3e, 0xc1, 0x98, 0xc9, 0x9d, 0xfd, 0x2f, 0xfc, 0x98,
	0xbb, 0x35, 0xf4, 0x35, 0x8c, 0xe6, 0x52, 0x5b, 0xbe, 0x5c, 0x55, 0xe2, 0x52, 0x16, 0xac, 0xd7,
	0x06, 0x84, 0x5b, 0xed, 0x7b, 0x41, 0x4f, 0x20, 0x14, 0xdb, 0xcd, 0x96, 0xf5, 0x13, 0x7f, 0x1c,
	0x1e, 0xbe, 0x71, 0xae, 0xfb, 0x83, 0xef, 0x84, 0xd8, 0xa9, 0xaa, 0x4d, 0x93, 0xef, 0xee, 0xc4,
	0x63, 0x2c, 0x45, 0x5d, 0xea, 0x82, 0x0d, 0xdc, 0x31, 0x1c, 0x7b, 0xf9, 0x19, 0xe2, 0xfb, 0x1b,
	0x69, 0x0c, 0xfe, 0xb5, 0x68, 0xba, 0x0e, 0x10, 0xe2, 0x61, 0x6f, 0x78, 0xb5, 0x76, 0x1d, 0x78,
	0xb9, 0x23, 0x9f, 0xc8, 0x47, 0x2f, 0xbd, 0x81, 0xd1, 0xb1, 0x2e, 0xb5, 0xa9, 0x4f, 0x79, 0x6d,
	0xe4, 0xed, 0x63, 0xf5, 0x75, 0xb9, 0x64, 0x37, 0x97, 0xbe, 0x82, 0x61, 0xc9, 0xed, 0x6f, 0xb1,
	0xa8, 0xb5, 0xe9, 0x2a, 0xbc, 0x13, 0x68, 0x02, 0x61, 0xc9, 0xed, 0x4c, 0x34, 0x76, 0xc5, 0x17,
	0x58, 0x26, 0x7e, 0xdf, 0x95, 0xd2, 0x2f, 0x70, 0xb0, 0xc1, 0x0f, 0x32, 0x29, 0x04, 0x8a, 0x2f,
	0x37, 0x17, 0xd6, 0x62, 0xd4, 0xae, 0x45, 0xb3, 0xb9, 0xad, 0x16, 0xa7, 0x19, 0xc4, 0x6e, 0x6a,
	0x97, 0x3a, 0x2d, 0xae, 0x9c, 0x97, 0xda, 0x7a, 0x29, 0xec, 0x42, 0xaf, 0xeb, 0xce, 0x0a, 0x21,
	0x65, 0x30, 0x30, 0xfa, 0x6f, 0x86, 0x01, 0x7e, 0xab, 0x6e, 0x68, 0x5a, 0x42, 0xe4, 0xfc, 0x8e,
	0x14, 0xaf, 0x1a, 0x2b, 0xed, 0x83, 0xc9, 0x52, 0x18, 0xb9, 0xe7, 0xe3, 0xd6, 0x31, 0xd2, 0x4e,
	0xb3, 0xa7, 0xe1, 0x1a, 0x23, 0xec, 0xba, 0xea, 0x1a, 0xed, 0x26, 0xde, 0xd3, 0xde, 0xfe, 0x80,
	0xa7, 0xf7, 0xde, 0x14, 0x0d, 0x61, 0x70, 0x91, 0xcd, 0xb2, 0xb3, 0x3f, 0x59, 0xfc, 0x84, 0x46,
	0x00, 0xf9, 0xf4, 0xe8, 0xeb, 0xe5, 0xf1, 0xd9, 0x45, 0x76, 0x1e, 0x7b, 0xf4, 0x00, 0x82, 0xf3,
	0x9f, 0xb3, 0xd3, 0x98, 0x20, 0xca, 0x11, 0xf9, 0x88, 0xbe, 0x21, 0x0a, 0xe6, 0xfd, 0xf6, 0x97,
	0xf8, 0xf0, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xe4, 0xb2, 0xca, 0x99, 0x24, 0x03, 0x00, 0x00,
}
