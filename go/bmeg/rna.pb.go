// Code generated by protoc-gen-go.
// source: bmeg/rna.proto
// DO NOT EDIT!

/*
Package bmeg is a generated protocol buffer package.

It is generated from these files:
	bmeg/rna.proto
	bmeg/clinical.proto
	bmeg/cna.proto
	bmeg/phenotype.proto
	bmeg/genome.proto
	bmeg/variants.proto
	bmeg/vest.proto
	bmeg/protein.proto

It has these top-level messages:
	GeneExpression
	CohortMatrix
	Keyspace
	MatrixVectorEdge
	MatrixAnalysis
	OntologyTerm
	Individual
	Biosample
	DrugTherapy
	RadiationTherapy
	ClinicalFollowup
	Cohort
	IndividualCohort
	CNACallSet
	CNASegment
	GeneOntologyTerm
	GeneOntologyAnnotation
	Compound
	Assay
	FDAApproval
	DoseResponse
	ResponseSummary
	CompoundElement
	ResponseCurve
	AssayData
	Evidence
	Phenotype
	G2PAssociation
	Position
	Gene
	Exon
	Transcript
	GeneSynonym
	GeneDatabase
	GeneFamily
	VariantSetMetadata
	VariantSet
	CallSet
	Call
	Variant
	TranscriptEffect
	VariantAnnotation
	VestScore
	Protein
*/
package bmeg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ExpressionScale int32

const (
	ExpressionScale_UNKNOWN    ExpressionScale = 0
	ExpressionScale_READ_COUNT ExpressionScale = 1
	ExpressionScale_TPKM       ExpressionScale = 2
	ExpressionScale_RPKM       ExpressionScale = 3
	ExpressionScale_FPKM       ExpressionScale = 4
)

var ExpressionScale_name = map[int32]string{
	0: "UNKNOWN",
	1: "READ_COUNT",
	2: "TPKM",
	3: "RPKM",
	4: "FPKM",
}
var ExpressionScale_value = map[string]int32{
	"UNKNOWN":    0,
	"READ_COUNT": 1,
	"TPKM":       2,
	"RPKM":       3,
	"FPKM":       4,
}

func (x ExpressionScale) String() string {
	return proto.EnumName(ExpressionScale_name, int32(x))
}
func (ExpressionScale) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GeneExpression struct {
	Id     string          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Source string          `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Alias  []string        `protobuf:"bytes,3,rep,name=alias" json:"alias,omitempty"`
	Scale  ExpressionScale `protobuf:"varint,4,opt,name=scale,enum=bmeg.ExpressionScale" json:"scale,omitempty"`
	// Target: Biosample
	BiosampleId string             `protobuf:"bytes,5,opt,name=biosample_id,json=biosampleId" json:"biosample_id,omitempty"`
	Expressions map[string]float64 `protobuf:"bytes,6,rep,name=expressions" json:"expressions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Method      string             `protobuf:"bytes,7,opt,name=method" json:"method,omitempty"`
}

func (m *GeneExpression) Reset()                    { *m = GeneExpression{} }
func (m *GeneExpression) String() string            { return proto.CompactTextString(m) }
func (*GeneExpression) ProtoMessage()               {}
func (*GeneExpression) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GeneExpression) GetExpressions() map[string]float64 {
	if m != nil {
		return m.Expressions
	}
	return nil
}

type CohortMatrix struct {
	Id          string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Method      string   `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	HasVector   []string `protobuf:"bytes,3,rep,name=hasVector" json:"hasVector,omitempty"`
	HasKeyspace []string `protobuf:"bytes,4,rep,name=hasKeyspace" json:"hasKeyspace,omitempty"`
}

func (m *CohortMatrix) Reset()                    { *m = CohortMatrix{} }
func (m *CohortMatrix) String() string            { return proto.CompactTextString(m) }
func (*CohortMatrix) ProtoMessage()               {}
func (*CohortMatrix) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Keyspace struct {
	Id   string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Keys []string `protobuf:"bytes,3,rep,name=keys" json:"keys,omitempty"`
}

func (m *Keyspace) Reset()                    { *m = Keyspace{} }
func (m *Keyspace) String() string            { return proto.CompactTextString(m) }
func (*Keyspace) ProtoMessage()               {}
func (*Keyspace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type MatrixVectorEdge struct {
	In      string `protobuf:"bytes,1,opt,name=in" json:"in,omitempty"`
	Out     string `protobuf:"bytes,2,opt,name=out" json:"out,omitempty"`
	RowName string `protobuf:"bytes,3,opt,name=rowName" json:"rowName,omitempty"`
}

func (m *MatrixVectorEdge) Reset()                    { *m = MatrixVectorEdge{} }
func (m *MatrixVectorEdge) String() string            { return proto.CompactTextString(m) }
func (*MatrixVectorEdge) ProtoMessage()               {}
func (*MatrixVectorEdge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type MatrixAnalysis struct {
	Id           string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	SourceMatrix []string `protobuf:"bytes,2,rep,name=sourceMatrix" json:"sourceMatrix,omitempty"`
	ResultMatrix []string `protobuf:"bytes,3,rep,name=resultMatrix" json:"resultMatrix,omitempty"`
}

func (m *MatrixAnalysis) Reset()                    { *m = MatrixAnalysis{} }
func (m *MatrixAnalysis) String() string            { return proto.CompactTextString(m) }
func (*MatrixAnalysis) ProtoMessage()               {}
func (*MatrixAnalysis) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*GeneExpression)(nil), "bmeg.GeneExpression")
	proto.RegisterType((*CohortMatrix)(nil), "bmeg.CohortMatrix")
	proto.RegisterType((*Keyspace)(nil), "bmeg.Keyspace")
	proto.RegisterType((*MatrixVectorEdge)(nil), "bmeg.MatrixVectorEdge")
	proto.RegisterType((*MatrixAnalysis)(nil), "bmeg.MatrixAnalysis")
	proto.RegisterEnum("bmeg.ExpressionScale", ExpressionScale_name, ExpressionScale_value)
}

func init() { proto.RegisterFile("bmeg/rna.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x53, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x25, 0x1f, 0x6d, 0xb7, 0x9b, 0x2a, 0x44, 0x16, 0xa0, 0x08, 0xf1, 0x50, 0x22, 0x21, 0x21,
	0x90, 0x8a, 0x34, 0x5e, 0x10, 0x0f, 0x48, 0x63, 0x94, 0x09, 0x95, 0x65, 0x28, 0x6c, 0xf0, 0x38,
	0xb9, 0xad, 0xb5, 0x44, 0x24, 0x76, 0x64, 0x27, 0x63, 0xf9, 0x75, 0xfc, 0x35, 0x7c, 0xe3, 0xa4,
	0x4b, 0xd7, 0xbd, 0x9d, 0x7b, 0x72, 0x7d, 0xce, 0xbd, 0xc7, 0x0e, 0xf8, 0xab, 0x82, 0x5d, 0xbf,
	0x93, 0x9c, 0xce, 0x4b, 0x29, 0x2a, 0x41, 0x5c, 0xac, 0xa3, 0x7f, 0x36, 0xf8, 0xa7, 0x8c, 0xb3,
	0xc5, 0x6d, 0x29, 0x99, 0x52, 0x99, 0xe0, 0xc4, 0x07, 0x3b, 0xdb, 0x84, 0xd6, 0xcc, 0x7a, 0x7d,
	0x98, 0x68, 0x44, 0x9e, 0xc1, 0x58, 0x89, 0x5a, 0xae, 0x59, 0x68, 0xb7, 0x5c, 0x57, 0x91, 0x27,
	0x30, 0xa2, 0x79, 0x46, 0x55, 0xe8, 0xcc, 0x1c, 0x4d, 0x9b, 0x82, 0xbc, 0x85, 0x91, 0x5a, 0xd3,
	0x9c, 0x85, 0xae, 0x6e, 0xf6, 0x8f, 0x9e, 0xce, 0xd1, 0x66, 0x7e, 0x27, 0xff, 0x13, 0x3f, 0x26,
	0xa6, 0x87, 0xbc, 0x84, 0xe9, 0x2a, 0x13, 0x8a, 0x16, 0x65, 0xce, 0xae, 0xb4, 0xe9, 0xa8, 0x35,
	0xf0, 0xb6, 0xdc, 0xb7, 0x0d, 0x39, 0x05, 0x8f, 0x6d, 0x0f, 0xab, 0x70, 0xac, 0xbd, 0xbc, 0xa3,
	0x57, 0x46, 0x75, 0x77, 0xf0, 0x81, 0x89, 0x5a, 0xf0, 0x4a, 0x36, 0xc9, 0xf0, 0x24, 0xae, 0x51,
	0xb0, 0x2a, 0x15, 0x9b, 0x70, 0x62, 0xd6, 0x30, 0xd5, 0xf3, 0x4f, 0x10, 0xdc, 0x3f, 0x48, 0x02,
	0x70, 0xfe, 0xb0, 0xa6, 0xcb, 0x00, 0x21, 0x2e, 0x7b, 0x43, 0xf3, 0xda, 0x64, 0x60, 0x25, 0xa6,
	0xf8, 0x68, 0x7f, 0xb0, 0xa2, 0x1b, 0x98, 0x9e, 0x88, 0x54, 0xc8, 0xea, 0x8c, 0x56, 0x32, 0xbb,
	0x7d, 0x28, 0xbe, 0xce, 0xd7, 0x1e, 0xfa, 0x92, 0x17, 0x70, 0x98, 0x52, 0xf5, 0x8b, 0xad, 0x2b,
	0x21, 0xbb, 0x08, 0xef, 0x08, 0x32, 0x03, 0x4f, 0x17, 0x4b, 0xd6, 0xa8, 0x92, 0xae, 0x31, 0x4c,
	0xfc, 0x3e, 0xa4, 0xa2, 0xcf, 0x70, 0xd0, 0xe3, 0x3d, 0x4f, 0x02, 0x2e, 0xa7, 0x45, 0x7f, 0x61,
	0x2d, 0x46, 0x4e, 0x2f, 0xd2, 0xdf, 0x56, 0x8b, 0xa3, 0x18, 0x02, 0x33, 0xb5, 0x71, 0x5d, 0x6c,
	0xae, 0x8d, 0x16, 0xdf, 0x6a, 0x71, 0xcc, 0x42, 0xd4, 0x55, 0x27, 0x85, 0x90, 0x84, 0x30, 0x91,
	0xe2, 0x6f, 0x8c, 0x06, 0x4e, 0xcb, 0xf6, 0x65, 0x94, 0x82, 0x6f, 0xf4, 0x8e, 0x39, 0xcd, 0x1b,
	0x95, 0xa9, 0xbd, 0xc9, 0x22, 0x98, 0x9a, 0xe7, 0x63, 0xfa, 0xb4, 0x2c, 0x4e, 0xb3, 0xc3, 0x61,
	0x8f, 0xbe, 0x8e, 0x3a, 0xef, 0x12, 0xed, 0x26, 0xde, 0xe1, 0xde, 0x7c, 0x87, 0xc7, 0xf7, 0xde,
	0x14, 0xf1, 0x60, 0x72, 0x19, 0x2f, 0xe3, 0xf3, 0xdf, 0x71, 0xf0, 0x48, 0xfb, 0x42, 0xb2, 0x38,
	0xfe, 0x72, 0x75, 0x72, 0x7e, 0x19, 0x5f, 0x04, 0x16, 0x39, 0x00, 0xf7, 0xe2, 0xc7, 0xf2, 0x2c,
	0xb0, 0x11, 0x25, 0x88, 0x1c, 0x44, 0x5f, 0x11, 0xb9, 0xab, 0x71, 0xfb, 0x4b, 0xbc, 0xff, 0x1f,
	0x00, 0x00, 0xff, 0xff, 0xe4, 0xb2, 0xca, 0x99, 0x24, 0x03, 0x00, 0x00,
}
