// This file defines the objects used to represent variant calls, most importantly
// VariantSet, Variant, and Call.
// See {TODO: LINK TO VARIANTS OVERVIEW} for more information.

syntax = "proto3";

package bmeg;

import "bmeg/clinical.proto";

//import "ga4gh/common.proto";
//import "google/protobuf/struct.proto";

// This metadata represents VCF header information.
message VariantSetMetadata {
    // The top-level key.
    string key = 1;

    // The value field for simple metadata.
    string value = 2;

    // User-provided ID field, not enforced by this API.
    // Two or more pieces of structured metadata with identical
    // id and key fields are considered equivalent.
    // FIXME: If it's not enforced, then why can't it be null?
    string id = 3;

    // The type of data.
    string type = 4;

    // The number of values that can be included in a field described by this
    // metadata.
    string number = 5;

    // A textual description of this metadata.
    string description = 6;

    // // A map of additional information about the metadata record.
    // google.protobuf.Struct attributes = 8;
    map<string,string> attributes = 8;
}

// A VariantSet is a collection of variants and variant calls intended to be
// analyzed together.
message VariantSet {
    // The variant set ID.
    string id = 1;

    // The variant set name.
    string name = 2;

    // The ID of the dataset this variant set belongs to.
    string dataset_id = 3;

    // The ID of the reference set that describes the sequences used by the
    // variants in this set.
    string reference_set_id = 4;

    // Optional metadata associated with this variant set.
    // This array can be used to store information about the variant set, such as
    // information found in VCF header fields, that isn't already available in
    // first class fields such as "name".
    repeated VariantSetMetadata metadata = 5;
}

// A CallSet is a collection of calls that were generated by the same analysis
// of the same sample.
message CallSet {
    // The call set ID.
    string id = 1;

    // The call set name.
    string name = 2;

    // The Biosample the call set data was generated from.
    string biosample_id = 3;

    // The IDs of the variant sets this call set has calls in.
    repeated string variant_set_ids = 4;

    // The date this call set was created in milliseconds from the epoch.
    int64 created = 5;

    // The time at which this call set was last updated in
    // milliseconds from the epoch.
    int64 updated = 6;

    string method = 7;
    string source = 9;

    // // A map of additional information about the Call Set.
    // google.protobuf.Struct attributes = 8;
}

// A `Call` represents the determination of genotype with respect to a
// particular `Variant`.
//
// It may include associated information such as quality
// and phasing. For example, a call might assign a probability of 0.32 to
// the occurrence of a SNP named rs1234 in a call set with the name NA12345.
message Call {
    // The name of the call set this variant call belongs to.
    // If this field is not present, the ordering of the call sets from a
    // `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match
    // the ordering of the calls on this `Variant`.
    // The number of results will also be the same.
    string call_set_name = 1;

    // The ID of the call set this variant call belongs to.
    //
    // If this field is not present, the ordering of the call sets from a
    // `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match
    // the ordering of the calls on this `Variant`.
    // The number of results will also be the same.
    string call_set_id = 2;

    string method = 6;
    string source = 3;
    string biosample_id = 9;

    // The genotype of this variant call.
    //
    // A 0 value represents the reference allele of the associated `Variant`. Any
    // other value is a 1-based index into the alternate alleles of the associated
    // `Variant`.
    //
    // If a variant had a referenceBases field of "T", an alternateBases
    // value of ["A", "C"], and the genotype was [2, 1], that would mean the call
    // represented the heterozygous value "CA" for this variant. If the genotype
    // was instead [0, 1] the represented value would be "TA". Ordering of the
    // genotype values is important if the phaseset field is present.
    // Missing genotype genotypes may be indicated using the "dot annotation" [".", "."],
    // as specified in VCF4.2; this is e.g. used for types of structural variants.
    // google.protobuf.ListValue genotype = 7;

    // If this field is populated, this variant call's genotype ordering implies
    // the phase of the bases and is consistent with any other variant calls on
    // the same contig which have the same phaseset string.
    string phaseset = 4;

    // The genotype likelihoods for this variant call. Each array entry
    // represents how likely a specific genotype is for this call as
    // log10(P(data | genotype)), analogous to the GL tag in the VCF spec. The
    // value ordering is defined by the GL tag in the VCF spec.
    repeated double genotype_likelihood = 5;

    // // A map of additional information about the Call.
    // google.protobuf.Struct attributes = 8;
}

// A `Variant` represents a change in DNA sequence relative to some reference.
// For example, a variant could represent a SNP or an insertion.
// Variants belong to a `VariantSet`.
// This is equivalent to a row in VCF.
message Variant {
    // The variant ID.
    string id = 1;

    // The ID of the `VariantSet` this variant belongs to. This transitively
    // defines
    // the `ReferenceSet` against which the `Variant` is to be interpreted.
    string variant_set_id = 2;

    // Names for the variant, for example a RefSNP ID.
    repeated string names = 3;

    // The date this variant was created in milliseconds from the epoch.
    int64 created = 4;

    // The time at which this variant was last updated in
    // milliseconds from the epoch.
    int64 updated = 5;

    // The reference on which this variant occurs.
    // (e.g. `chr20` or `X`)
    string reference_name = 6;

    // The start position at which this variant occurs (0-based).
    // This corresponds to the first base of the string of reference bases.
    // Genomic positions are non-negative integers less than reference length.
    // Variants spanning the join of circular genomes are represented as
    // two variants one on each side of the join (position 0).
    int64 start = 7;

    // The end position (exclusive), resulting in [start, end) closed-open
    // interval.
    // This is typically calculated by `start + referenceBases.length`.
    int64 end = 8;

    // The reference bases for this variant. They start at the given start
    // position.
    string reference_bases = 9;

    // The bases that appear instead of the reference bases. Multiple alternate
    // alleles are possible.
    repeated string alternate_bases = 10;

    // // A map of additional information about the Variant.
    // google.protobuf.Struct attributes = 13;

    // The variant calls for this particular variant. Each one represents the
    // determination of genotype with respect to this variant. `Call`s in this
    // array are implicitly associated with this `Variant`.
    repeated Call calls = 12;

    // The "variant_type" is used to denote e.g. structural variants.
    // Examples:
    //   DUP  : duplication of sequence following "start"; not necessarily in situ
    //   DEL  : deletion of sequence following "start"
    string variant_type = 17;

    // Length of the - if labeled as such in variant_type - structural variation.
    // Based on the use in VCFv4.2
    int64 svlen = 18;

    // In the case of structural variants, start and end of the variant may not
    // be known with an exact base position. "cipos" provides an interval with
    // high confidence for the start position. The interval is provided by 0 or
    // 2 signed integers which are added to the start position.
    // Based on the use in VCFv4.2
    // Example:
    //   [ -12000, 1000 ]
    repeated sint32 cipos = 19;

    // Similar to "cipos", but for the variant's end position (which is derived
    // from start + svlen).
    // Example:
    //   [ -1000, 0 ]
    repeated sint32 ciend = 20;

    // True if filters were applied for this variant. VCF column 7 "FILTER"
    // any value other than the missing value.
    bool filters_applied = 14;

    // True if all filters for this variant passed. VCF column 7 "FILTER"
    // value PASS.
    bool filters_passed = 15;

    // Zero or more filters that failed for this variant. VCF column 7 "FILTER"
    // shared across all alleles in the same VCF record.
    repeated string filters_failed = 16;

    string source = 21;
}

// A transcript effect record is a set of information describing the effect of
// an allele on a transcript
message TranscriptEffect {
    //  The ID of the transcript effect record
    string id = 1;

    // The id of the transcript feature the annotation is relative to.
    // TODO: derive unique id from digest of data [location, allele, transcript?]
    string feature_id = 2;

    // Alternate allele - a variant may have more than one alternate allele,
    // each of which will have distinct annotation.
    string alternate_bases = 3;

    // Effect of variant on this feature.
    repeated OntologyTerm effects = 4;

    // // Human Genome Variation Society variant descriptions.
    // HGVSAnnotation hgvs_annotation = 5;

    // // Change relative to cDNA.
    // AlleleLocation cdna_location = 6;

    // // Change relative to coding sequence.
    // AlleleLocation cds_location = 7;

    // // Change relative to protein.
    // AlleleLocation protein_location = 8;

    // // Output from prediction packages such as SIFT.
    // repeated AnalysisResult analysis_results = 9;
  
    // A map of additional information about the Transcript Effect.
    // Attributes attributes = 11;
}

// A `VariantAnnotation` record represents the result of comparing a variant to
// a set of reference data.
message VariantAnnotation {
    // The ID of this VariantAnnotation.
    string id = 1;

    // The variant ID.
    string variant_id = 2;

    // The ID of the variant annotation set this record belongs to.
    string variant_annotation_set_id = 3;

    // The time at which this record was created, in ISO 8601 format.
    string created = 4;

    // The transcript effect annotation for the alleles of this variant. Each
    // one represents the effect of a single allele on a single transcript.
    repeated TranscriptEffect transcript_effects = 5;

    // // A map of additional information about the Annotation.
    // Attributes attributes = 7;
}
